\documentclass[twocolumn,global]{svjour}
\usepackage{tex4log}
\journalname{Submitted to WVU Knowledge Engineering}
\date{Wp ref: tim/src/pl/cocomo/cocomo \today}
\newcommand{\ME}{OMO}
\begin{document}
\title{
\begin{minipage}{.3\linewidth}
\includegraphics[width=2in]{omo.eps}\end{minipage}
\begin{minipage}{.6\linewidth}
\ME:\newline A Prolog-based Software Cost Estimation Tool
\end{minipage}}
\author{Tim Menzies\inst{1}, Santa Clause\inst{2}}
\institute{\input{institute}}
\maketitle
\thispagestyle{empty}\pagestyle{plain}
 \begin{abstract}

COCOMO is a software effort estimation tool.
{\ME} is COCOMO written in SWI-Prolog~\cite{swiprolog}. and documented using
{\Tex4Log}.
\end{abstract}

\setcounter{tocdepth}{2}\tableofcontents\newpage%\listoffigures
\section{ Introduction}
\subsection{ About COCOMO}
\input{cocomo}
\subsection{ Structure of this document}
 My Prolog code descriptions have the following format:
\be
\item Motivation: why is this system being built?
\item Samples: with this system, what kind of things can a user do?
(may include
sample inputs/outputs).
\item High-level walk through: before the code is revealed in all its glory,
	an abstract description of its unique features and architecture is
    of much benefit.
\item Examples (longer samples): Detailed inputs/outputs; graphs of
experimental results; discussion; future work section.
\item Code: All the Prolog
\item 
An appendix with acknowledgements, references, and licensing details.
\ee
The code section is in three parts:
\be
\item
Shell
\item
Shell tart-up code (must be loaded into Prolog)
\item Knowledge base
\ee
The shell divides up as follows:
\be
\item Initializations:
\bi
\item
Operator definitions (must be first).
\item
Flags (these can usually go just before the start-up
actions but, for safety's sake, we place them at the
front).
\item
hooks (into the Prolog reader)
\item
hacks (shameful things we'd rather hide).
\ei
\item
Library code which, ideally,
should be good for more than just this application.
\item
The actual system code.
\ee
Note that for exposition purposes, it is often  to load the library, then load
and explain the system code, then expalin the library. 
\section{ Initializations}
\subsection{ Operators }\begin{Verbatim}
:- op(1,xfx, to).
:- op(700,xfx, :=).
\end{Verbatim}
\subsection{ Flags }\begin{Verbatim}
:- dynamic       option/2.
:- discontiguous option/2,lookUp1/4.
:- index(lookUp1(1,1,1,0)).
\end{Verbatim}
\subsection{ Hooks}
 Fast assertions of named variables. 
\begin{Verbatim}
term_expansion((X;Y :- Z),Out) :-
	multis(((X;Y) :- Z),Out).
\end{Verbatim}
 Define tabular material 
\begin{Verbatim}
term_expansion(Table = Cols + Rows , Out) :- !,
	lookUpTable(Table=Cols+Rows,Out). 
\end{Verbatim}
 Set global options. 
\begin{Verbatim}
term_expansion(A=B,[]) :- set(A=B).
\end{Verbatim}
 Instantiate named fields 
\begin{Verbatim}
term_expansion(Functor is Fields,Out) :-
	fields(Fields,Functor,Out).
\end{Verbatim}
\subsection{ Hacks }
 No hacks (yet).  
\subsection{ Library (load)}
 Loaded here, explained later in \tion{libsrc}. 
\begin{Verbatim}
:- [lib]. 
\end{Verbatim}
\section{ System code }
\subsection{ Main driver }\begin{Verbatim}
estimate :-
	cocomo(Coc),
	estimate(Pm,Staff,Months),
	format('COCOMO.~p says ~p months (total);',[Coc,Pm]),
	format('~p staff over ~p months\n', [Staff,Months]).

estimate(Pm,Staff,Months) :-
	tdev(Tdev),
	pm(Pm0),
	Pm is Pm0,
	Staff is ceiling(Pm/Tdev),
	Months is ceiling(Tdev),
	!.
\end{Verbatim}
\subsection{ Equations}
\subsubsection{ Sizing equations }\begin{Verbatim}
size((1 + (R/100)) *(N + E)) :- 
	revl(R), newKsloc(N), equivalentKsloc(E).

equivalentKsloc(Ak*Aam*(1-(At/100))) :- 
	adaptedKsloc(Ak), at(At), aam(Aam).

aam(Am) :- aaf(Af), compare(C,Af,50), aam1(C,Af,Am).

aam1(=,Af, X) :- aam1(<,Af,X).
aam1(>,Af, (Aa+Af+(Su*U))/100) :- aa(Aa),su(Su),unfm(U).
aam1(<,Af,((Aa+Af*(1+(0.02*Su*U)))/100)) :-
	aa(Aa), su(Su), unfm(U).

aaf(0.4*Dm+0.3*Cm+0.3*Im) :- dm(Dm), cm(Cm), im(Im).
\end{Verbatim}
\subsubsection{ Schedule Equations }\begin{Verbatim}
tdev((C*(P^F))*SP/100) :-
	c(C), pmNs(P), f(F), scedPercent(SP).

f( D + 0.2*(E-B))  :-
	d(D),e(E), b(B).
\end{Verbatim}
\subsubsection{ Effort Equations }\begin{Verbatim}
%hmmm... sced value never used
pm(Pm0*Em17+Pa) :-
	pmNs(Pm0), w(sced,Em17), pmAuto(Pa).

pmNs(A*(S^E)*Em1 *Em2 *Em3 *Em4 *Em5 *Em6 *Em7*Em8*Em9*
            Em10*Em11*Em12*Em13*Em14*Em15*Em16) :-
	a(A), size(S), e(E), w(rely,Em1), w(data,Em2),
	w(cplx,Em3), w(ruse,Em4), w(docu,Em5), w(time,Em6),
	w(stor,Em7), w(pvol,Em8), w(acap,Em9), w(pcap,Em10),
	w(pcon,Em11),w(aexp,Em12),w(pexp,Em13),
	w(ltex,Em14),w(tool,Em15),w(site,Em16).

e(B + 0.01*(Sf1+Sf2+Sf3+Sf4+Sf5)) :-
	b(B), 
	w(prec,Sf1), w(flex,Sf2),w(arch,Sf3),
	w(team,Sf4), w(pmat,Sf5).

pmAuto((Ak*(At/100))/Ap) :-
	adaptedKsloc(Ak), at(At), atKprod(Ap).
\end{Verbatim}

\subsection{ Tunings }
\subsubsection{ Constants }\begin{Verbatim}
a(2.5)  :- cocomo(1983).
a(2.94) :- cocomo(2000).
a(2.94) :- cocomo(ga).

b(0.91) :- cocomo(2000).
b(1.01) :- cocomo(1983).
b(1.01) :- cocomo(ga).

c(3.0)  :- cocomo(1983).
c(3.67) :- cocomo(2000).
c(3.67) :- cocomo(ga).

d(0.28) :- cocomo(2000).
d(0.33) :- cocomo(1983).
d(0.33) :- cocomo(ga).
\end{Verbatim}
\subsubsection{ Post-architecture scale factors}
 The COCOMO 2000 scale factors learnt
via bayesian tuning.  \begin{Verbatim}
postArch(2000,scaleFactors) =
           [ xl, vl,   l,   n,   h,  vh,  xh]+
    [[prec,  _,6.20,4.96,3.72,2.48,1.24,   _]
    ,[flex,  _,5.07,4.05,3.04,2.03,1.01,   _]
    ,[arch,  _,7.07,5.65,4.24,2.83,1.41,   _]
    ,[team,  _,5.48,4.38,3.29,2.19,1.01,   _]
    ,[pmat,  _,7.80,6.24,4.68,3.12,1.56,   _]
    ].
\end{Verbatim}
 The original scale factors.  \begin{Verbatim}
postArch(1983,scaleFactors) =
           [ xl,  vl,   l,   n,   h,  vh, xh]+
    [[prec,   _,4.05,3.24,2.43,1.62,0.81,  _]
    ,[flex,   _,6.07,4.86,3.64,2.43,1.21,  _]
    ,[arch,   _,4.22,3.38,2.53,1.69,0.84,  _]
    ,[team,   _,4.94,3.95,2.97,1.98,0.99,  _]
    ,[pmat,   _,4.54,3.64,2.73,1.82,0.91,  _]
    ].
\end{Verbatim}
 Some scale factors learnt via some
genetic algorithms.  \begin{Verbatim}
postArch(ga,scaleFactors) =
            [ xl,  vl,   l,   n,   h,  vh,  xh]+
    [[prec,   _,4.05,3.24,2.43,1.62,0.81,    _]
    ,[flex,    _,6.07,4.86,3.64,2.43,1.21,   _]
    ,[arch,    _,4.22,3.38,2.53,1.69,0.84,   _]
    ,[team,    _,4.94,3.95,2.97,1.98,0.99,   _]
    ,[pmat,    _,4.54,3.64,2.73,1.82,0.91,   _]
    ].
\end{Verbatim}
\subsubsection{ Post-architecture effort multipliers:}
 The COCOMO 2000 effort multipliers learnt
via bayesian tuning.  \begin{Verbatim}
postArch(2000,effortMultiplers) =
           [xl,   vl,   l,   n,  h,  vh,  xh]+
    [[rely,  _,0.82,0.92,1.00,1.10,1.26,   _]
    ,[data,  _,_   ,0.90,1.00,1.14,1.28,   _]
    ,[cplx,  _,0.73,0.87,1.00,1.17,1.34,1.74]
    ,[ruse,  _,_   ,0.95,1.00,1.07,1.15,1.24]
    ,[docu,  _,0.81,0.91,1.00,1.11,1.23,   _]
    ,[time,  _,   _,   _,1.00,1.11,1.29,1.63]
    ,[stor,  _,   _,   _,1.00,1.05,1.17,1.46]
    ,[pvol,  _,   _,0.87,1.00,1.15,1.30,   _]
    ,[acap,  _,1.42,1.19,1.00,0.85,0.71 ,  _]
    ,[pcap,  _,1.34,1.15,1.00,0.88,0.76,   _]
    ,[pcon,  _,1.29,1.12,1.00,0.90,0.81,   _]
    ,[aexp,  _,1.22,1.10,1.00,0.88,0.81,   _]
    ,[pexp,  _,1.19,1.09,1.00,0.91,0.85,   _]
    ,[ltex,  _,1.20,1.09,1.00,0.91,0.84,   _]
    ,[tool,  _,1.17,1.09,1.00,0.90,0.78,   _]
    ,[site,  _,1.22,1.09,1.00,0.93,0.86,0.80]
    ,[sced,  _,1.43,1.14,1.00,1.00,1.00,   _]
    ].
\end{Verbatim}
 The original effort multipliers.  \begin{Verbatim}
postArch(1983,effortMultiplers) =
           [ xl,  vl,   l,   n,   h,  vh,  xh]+
    [[rely,   _,0.75,0.88,1.00,1.15,1.40,   _]
    ,[data,   _,   _,0.94,1.00,1.08,1.16,   _]
    ,[cplx,   _,0.75,0.88,1.00,1.15,1.30,1.65]
    ,[ruse,   _,   _,0.89,1.00,1.16,1.34,1.56]
    ,[docu,   _,0.85,0.93,1.00,1.08,1.17,   _]
    ,[time,   _,   _,   _,1.00,1.11,1.30,1.66]
    ,[stor,   _,   _,   _,1.00,1.06,1.21,1.56]
    ,[pvol,   _,   _,0.87,1.00,1.15,1.30,   _]
    ,[acap,   _,1.50,1.22,1.00,0.83,0.67,   _]
    ,[pcap,   _,1.37,1.16,1.00,0.87,0.74,   _]
    ,[pcon,   _,1.26,1.11,1.00,0.91,0.83,   _]
    ,[aexp,   _,1.23,1.10,1.00,0.88,0.80,   _]
    ,[pexp,   _,1.26,1.12,1.00,0.88,0.80,   _]
    ,[ltex,   _,1.24,1.11,1.00,0.90,0.82,   _]
    ,[tool,   _,1.20,1.10,1.00,0.88,0.75,   _]
    ,[site,   _,1.24,1.10,1.00,0.92,0.85,0.79]
    ,[sced,   _,1.23,1.08,1.00,1.04,1.10,   _]
    ].
\end{Verbatim}
 Some effort multipliers learnt via some
genetic algorithms.  \begin{Verbatim}
postArch(ga,effortMultiplers) =
            [ xl,  vl,   l,   n,   h,  vh,  xh]+
    [[rely,    _,0.79,0.78,1.00,1.16,1.41,   _]
    ,[data,    _,   _,0.96,1.00,1.31,1.20,   _]
    ,[cplx,    _,0.90,1.06,1.00,0.99,0.99,0.87]
    ,[ruse,    _,   _,0.89,1.00,1.16,1.34,1.56]
    ,[docu,    _,0.85,0.93,1.00,1.08,1.17,   _]
    ,[time,    _,   _,   _,1.00,1.01,1.24,2.13]
    ,[stor,    _,   _,   _,1.00,1.36,1.37,1.42]
    ,[pvol,    _,   _,1.25,1.00,1.13,1.15,   _]
    ,[acap,    _,1.19,1.26,1.00,1.00,0.73,   _]
    ,[pcap,    _,1.71,1.73,1.00,0.75,0.74,   _]
    ,[pcon,    _,1.26,1.11,1.00,0.91,0.83,   _]
    ,[aexp,    _,1.41,1.02,1.00,0.64,0.86,   _]
    ,[pexp,    _,1.26,1.12,1.00,0.88,0.80,   _]
    ,[ltex,    _,1.24,1.11,1.00,0.90,0.82,   _]
    ,[tool,    _,1.13,0.91,1.00,1.09,2.86,   _]
    ,[site,    _,1.24,1.10,1.00,0.92,0.85,0.79]
    ,[sced,    _,1.22,1.29,1.00,0.72,0.29,   _]
    ].
\end{Verbatim}
\subsection{ Data dictionary}
\subsubsection{ General }\begin{Verbatim}
languageP(X) :- upf2sloc(X,_).

sym(X) :- rsym(X).

onezeroP(X) :- rin(0,1,0.2,X), number(X).

percentP(X) :- rin(0,100,1,X),integer(X).

posint(X)   :- rin(0,65536,X),integer(X).
posnum(X)   :- rin(0,inf,X),number(X).

num10(X) :- rin(0,10,X), number(X).

cocomoP(2000).
cocomoP(1983).
cocomoP(ga).

vlvh(n). vlvh(l). vlvh(h). vlvh(vl). vlvh(vh).

lvh(n). lvh(l). lvh(h). lvh(vh).

vlxh(n).  vlxh(l).  vlxh(h).
vlxh(vl). vlxh(vh). vlxh(xh). 

lxh(n). lxh(l). lxh(h). lxh(vh). lxh(xh). 

nxh(n). nxh(h). nxh(vh). nxh(xh).
\end{Verbatim}
\subsubsection{ "project"}
\begin{Verbatim}
(cocomo(Coc); label(L); language(Lan)
;revl(R); newKsloc(K)
;adaptedKsloc(A) ;cm(C); dm(D); im(I) ;aa(Aa) ;unfm(U)
;su(Su) ;at(At) ;atKprod(Atp) ;scedPercent(Sc)
) :-
	project(Coc,L,Lan,R,K,A,C,D,I,Aa,U,Su,At,Atp,Sc), 

	cocomoP(Coc),
	sym(L), languageP(Lan), percentP(R), percentP(K),
	posint(A), percentP(C), percentP(I), percentP(Aa),
	onezeroP(U), percentP(Su) ,percentP(At),
	posnum(Atp) ,posint(Sc),!.
\end{Verbatim}
\subsubsection{ "scores"}
\begin{Verbatim}
(s(prec,Prec) ;s(flex,Flex) ;s(arch,Arch)
;s(team,Team) ;s(pmat,Pmat) ;s(rely,Rely)
;s(data,Data) ;s(cplx,Cplx) ;s(ruse,Ruse)
;s(docu,Docu) ;s(time,Time) ;s(stor,Stor)
;s(pvol,Pvol) ;s(acap,Acap) ;s(pcap,Pcap)
;s(pcon,Pcon) ;s(aexp,Aexp) ;s(pexp,Pexp)
;s(ltex,Ltex) ;s(tool,Tool) ;s(site,Site) ;s(sced,Sced)
):-
	scores(Prec,Flex,Arch,Team,Pmat,Rely,Data,Cplx,
	        Ruse,Docu,Time,Stor,Pvol,Acap,Pcap,Pcon,
		Aexp,Pexp,Ltex,Tool,Site,Sced),
		
	vlvh(Prec), vlvh(Flex), vlvh(Arch), vlvh(Team),
	vlvh(Pmat), vlvh(Rely),  lvh(Data), vlxh(Cplx),
	 lxh(Ruse), vlvh(Docu),  nxh(Time),  nxh(Stor),
	 lvh(Pvol), vlvh(Acap), vlvh(Pcap), vlvh(Pcon),
	vlvh(Aexp), vlvh(Pexp), vlvh(Ltex), vlvh(Tool),
	vlxh(Site),!.
\end{Verbatim}
\subsubsection{ scores2Weight }\begin{Verbatim}
w(A,W) :-
	demand(s(A,S)),
	postArch(A,S,W),
	demand(num10(W)).

postArch(A,S,W) :-
	cocomo(When),
	lookUp(postArch(When,_),A,S,W).
\end{Verbatim}
\section{ Shell start up actions }\begin{Verbatim}
:- current_prolog_flag(max_integer,X),
   assert(inf(X)).

:- arithmetic_function(inf/0).

:- sneak(
	['defaults.omo' % see \tion{defaults}
        ,'config.omo'   % see \tion{config}
        , ufp2sloc
    ]).

:- commandLine.
:- ?verbose -> hello ; true.
\end{Verbatim}
\section{ Knowledge base}
\subsection{ Sample project }\begin{Verbatim}
scores is [s(pmat,vl)
	  ,s(pvol,l)
          ,s(ltex,l)
          ].
	
project is [cocomo(ga)
           ,label('eg#1')
           ,language(prolog)
           ,revl(10)
           ,newKsloc(100)
           ,adaptedKsloc(0)
           ,cm(0)     % new code
           ,dm(0)     % new code
           ,im(0)     % new code
           ,aa(2)     % basic module search + docu \cite[p24]{boehm00b}
           ,unfm(0.4) % somewhat familiar
           ,su(30)    % nominal value \cite[p23]{boehm00b}
           ,at(0)
           ,atKprod(2.4)
           ,scedPercent(100)
           ].
\end{Verbatim}
\section{ Library (source code)}
\label{sec:libsrc}
\input{lib} 
\acknowledgement{\input{thanks}}
\bibliographystyle{abbrv}{
\footnotesize \bibliography{refs}
\appendix
\input{license}
\section{ Work-in-progress}
 I.e. not working yet 
\subsection{ Early design effort multiplers  }\begin{Verbatim}
effortMultipliers(early) =
              [  xl,   vl,  l,n,   h,  vh,  xh]+
    [[rcpx,    0.49,0.60,0.83,1,1.33,1.92,2.72]
    ,[ruse,       _,   _,0.95,1,1.07,1.15,1.24]
    ,[pdif,       _,   _,   1,1,   1,   _,   _]
    ,[pers,    2.12,1.62,1.26,1,0.83,0.63,0.50]
    ,[prex,    1.59,1.33,1.12,1,0.87,0.74,0.62]
    ,[fcil,    1.43,1.30,1.10,1,0.87,0.73,0.62]
    ,[sced,       _,1.43,1.14,1,   1,   1,   _]
    ].
\end{Verbatim} 
\subsection{ Function point calculations}
\subsubsection{ Unadjusted function points to SLOC conversion ratios}

As loaded from `ufp2sloc.pl`
(source: \url{http://www.theadvisors.com/langcomparison.htm}): 
\begin{Verbatim}
upf2sloc("aas macro", 91).
upf2sloc("abap/4",    16).
upf2sloc("accel",     19).
upf2sloc("access",    38).
upf2sloc("actor",     21).
upf2sloc("acumen",    28).
upf2sloc("ada 83",    71).
upf2sloc("ada 95",    49).
...
\end{Verbatim}

\subsubsection{ Function point complexity tables}
 For internal logical files and external interface files: 
\begin{Verbatim}
ilfEif2Complexity =
    % record elements  data elements
    % ---------------  ----------------------------
                      [1 to 19, 20 to 50, 51 to inf]+
    [[0 to 1,              low,      low,       avg]
    ,[2 to 5,              low,      avg,      high]
    ,[6 to inf,            avg,      high,     high]
    ].
\end{Verbatim}
 For external output and external inquiry: 
\begin{Verbatim}
eoEq2Complexity = 
    % record elements  data elements
    % ---------------  --------------------------
                      [1 to 5, 6 to 19, 20 to inf]+
    [[0 to 1,             low,     low,       avg]
    ,[2 to 3,             low,     avg,      high]
    ,[4 to inf,           avg,    high,      high]
    ].
\end{Verbatim}
 For external input:  \begin{Verbatim}
ei2Complexity =
    % record elements  data elements
    % ---------------  --------------------------
                      [1 to 4, 5 to 15, 16 to inf]+
    [[0 to 1,              low,    low,       avg]
    ,[2 to 3,              low,    avg,      high]
    ,[3 to inf,            avg,   high,      high]
    ].
\end{Verbatim}
\subsection{ Key process areas}
 COCOMO.2000 lets `pmat`
be calcuated from answers to a questionnaire on pages 37-40 of
\cite{boehm00b}. 
\subsubsection{ Key process area answers}
 From \cite[p34-36]{boehm00b}. First, we need some English words: 
\begin{Verbatim}
pmatc(P) :- empl(E), empl2pmat(E,P).

empl(E) :- kpas(Ks), E is round(5*Ks/100).

kpas(Av) :- average(K,kpa(K),Av).

kpa(K)  :- kpa(_,K).

empl2pmat(0,vl).
empl2pmat(1,l).
empl2pmat(2,n).
empl2pmat(3,h).
empl2pmat(4,vh).
empl2pmat(5,xh).
\end{Verbatim}
 The answers to the questionnaire can be represented as follows: \begin{Verbatim}
almostAlways(100).
frequently(75).
aboutHalf(50).
occasionally(25).
rarelyIfEver(1).

kpa(requirementsManagement,X)        :- aboutHalf(X).
kpa(softwareProjectPlanning,X)       :- almostAlways(X).
kpa(softwareProjectTrackingAndOversight,X) :- occasionally(X).
kpa(softwareSubcontractManagement,X) :- aboutHalf(X).
kpa(sofwareQualityAssurance,X)       :- aboutHalf(X).
kpa(sofwareConfigurationManagement,X):- aboutHalf(X).
kpa(organizationProcessFocus,X)      :- occasionally(X).
kpa(organizationProcessDefinition,X) :- occasionally(X).
kpa(trainingPrograms,X)              :- aboutHalf(X).
kpa(integratedSoftwareManagement,X)  :- occasionally(X).
kpa(softwareProductEngineering,X)    :- occasionally(X).
kpa(intergroupCoordination,X)        :- occasionally(X).
kpa(peerReviews,X)                   :- rarelyIfEver(X).
kpa(quantitativeProcessManagement,X) :- rarelyIfEver(X).
kpa(defectPrevention,X)              :- rarelyIfEver(X).
kpa(technologyChangeManagement,X)    :- rarelyIfEver(X).
kpa(processChangeManagement,X)       :- rarelyIfEver(X).
\end{Verbatim}
\end{document}

