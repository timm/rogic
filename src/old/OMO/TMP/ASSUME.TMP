

=head1 Handling assumptions

 :- ensure_loaded([assume0,assume1]). /*

We seperate out I<type rules> from I<what-if ranges>:

=over 8

=item Type rules

Type rules define legal ranges for a variable of  a certain
type. They can also check that a bound variable for a certain
type is legal.

For example, the OMO type rules are shown in L<Data dictionary for COCOMO>.

=item What-if ranges

What-if ranges represent domain knowledge that a variable is to be restructed
to a certain range.

For example, the OMO type rules are shown in L<An example what-if range for COCOMO>.


=back


=head1 Data dictionary for COCOMO

=head2 Types

 sym      !X :- rysm(X).
 cocomoP  !X :- X in [2000,1983,ga].
 vlvh     !X :- X in [n,l,h,vl,vh].
 lvh      !X :- X in [n,l,h,vh].
 vlxh     !X :- X in [n,l,h,vl,vh,xh].
 lxh      !X :- X in [n,l,h,vh,xh].
 nxh      !X :- X in [n,h,vh,xh].

 language !X :- X in ['ada 83', 'ada 95', 'ai shells', basic,
	               cobol,c, 'c++', clos, eiffel, forth,
		       fortran, java, jovial, lisp, pascal,
		       prolog, rexx, simula, smalltalk].
 onezero  !X :- X from 0 to   1 by 0.2, number(X).
 percent  !X :- X from 0 to 100 by   1, integer(X).
 posint   !X :- X from 0 to 65536,      integer(X).
 posnum   !X :- X from 0 to inf,        number(X).
 num10    !X :- X from 0 to  10,        number(X).

=head2 Variables

 cocomo       of cocomoP.   label        of sym.
 language     of language.  revl         of percent.
 newKsloc     of percent.   adaptedKsloc of posint.
 cm           of percent.   dm           of percent.
 im           of percent.   aa           of percent.
 unfm         of onezero.   su           of percent.
 at           of percent.   atKprod      of posnum.
 scedPercent  of percent.

 prec of vlvh.  flex of vlvh.  arch of vlvh.
 team of vlvh.  pmat of vlvh.  rely of vlvh.
 data of lvh.   cplx of vlxh.  ruse of lxh.
 docu of vlvh.  time of nxh.   stor of nxh.
 pvol of lvh.   acap of vlvh.  pcap of vlvh.
 pcon of vlvh.  aexp of vlvh.  pexp of vlvh.
 ltex of vlvh.  tool of vlvh.  site of vlxh.
 sced of vlvh.





=head1 An example what-if range for COCOMO

/*In practice, users offer one I<what-if> file that defines certain restrictions
to the simulation. */

 cocomo ?2000.
 prec   ?X :- X in [vl,vh].

So, once these what-of ranges are loaded, then all subsequent
random simulations can pull randomly from the ranges of every other variable,
However, for the variables listed above,  simulations are
certain restrictions.


=head1 Set-up code

=head2 Uses

  :- [io,random,meta].

=head2 Operators

 :- op(1,xfx,[(!),(?),of]).

=head2 Flags

  :- index(memo(1,1,0)).
  :- dynamic(memo/3).

=head2 Hooks

  term_expansion(X of Type,X of Type) :- knownType(Type).

  term_expansion((Var ?X :- Body), (Var ?X :- Body)) :- knownVar(Var).
  term_expansion((Var ?X),         (Var ?X)        ) :- knownVar(Var).


=head1 Assumption control

=head2 Known Type

  knownType(Type) :-
    clause(Type!_,_) -> true ; barphln(badType(T))..

=head2 Known Var

  knownVar(Var) :- Var of Type, knownType(Type).

=head2 C<good(Type,Old,New>: consistency check

Currently, we don't have any knowledge of special types. So 
something is consistent with something else if it matches to it.

  good(_Type,Out,Out).

=head2 C<assume(Id,Value)>: declare that C<Id> has a C<Value>

Helper- in the case where there is only one value for a type,
then the type name is the value name.

  assume(Id,Value) :- assume(Id,Id,Value).

Worker- if we have assumed it previously, then fail if the new C<Value>
contradicts the old C<Value>. Else, generate a random new C<Value> for
this C<Type> of thing..

  assume(Id,Value) :-
     Id of Type,
     hash_term(Id,Hash), 
     (memo(Hash,Id,Temp)
      -> good(Type,Temp,Value)
      ;  any(!(Type,Value)),
	 bassert(memo(Hash,Id,Value))).

=head2 C<reset> the memos

Wipe all the old memos, pick some new ones from the what-if ranges.

  reset :-
	retractall(memo(A,B,C,D)),
	forall(guessable(X,Y),(guess(X,Y), assume(X,Y))).

=head2 C<Guess(Var,Value)>: draw C<Value> from C<Var>'s what-if range

  guess(X,Y) :- 
      guessable(X,Y), any(X?Y), X of T, (T!Y -> true;  burp(badValue(X?Y))).

=head2 C<Guessable>

Find variables with a defined what-if range

  guessable(X,Y) :- bagof(X?Y,clause(X?Y),L),member(X?Y,L).



