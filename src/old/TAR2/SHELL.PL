(d)/data = ['true',
	'goodRequirements',
	'stableRequirements',
	'completeRequirements',
	'authorization',
	'effectiveReqReviews',
	'problemReport',
	'configurationManagement',
	'iv&v',
	'authorizationToProceed',
	'peerReviewOfRequirements',
	'conductFormalInspectionOfRequirements',
	'softwareAssuranceReviewOfRequirements',
	'problemReportAndCorrectiveActionSystem',
	'implementFormalConfigurationManagement',
	'conductFormalReviews',
	'planAndScheduleIV&Vactivities',
	'documentedRequirements',
	'designMeetsRequirementsReview',
	'designReqReview',
	'goodDesign',
	'meetSpecs',
	'achievableDesign',
	'documentDesign',
	'documentPreliminary&DetailedDesigns',
	'conductFormalDesignInspections',
	'conductFormalDesignReviews',
	'peerReviewsOnDesign',
	'designReviews',
	'createBaselineForDesign',
	'baselineDesign',
	'placeDesignUnderCM',
	'cmForDesign',
	'formalChangeControlForDesign',
	'designChangeControl',
	'feasibleDesignToCode',
	'goodTesting',
	'testPlansDocumented',
	'testPlans',
	'unitTestConducted',
	'unitTest',
	'goodCoding',
	'goodImplemenation',
	'codeReviews',
	'conductCodeWalkthrough',
	'conductCodeReview',
	'goodIntegration',
	'systemIntegration',
	'conductSystemIntegration',
	'goodProject', 
	'[authorization@57]Cost', 
	'[authorization@57]Chances', 
	'[effectiveReqReviews@62]Cost', 
	'[effectiveReqReviews@62]Chances', 
	'[problemReport@70]Cost', 
	'[problemReport@70]Chances', 
	'[configurationManagement@73]Cost', 
	'[configurationManagement@73]Chances', 
	'[iv&v@76]Cost', 
	'[iv&v@76]Chances', 
	'[stableRequirements@80]Cost', 
	'[stableRequirements@80]Chances', 
	'authorization in [stableRequirements@80]Cost', 
	'authorization in [stableRequirements@80]Chances', 
	'effectiveReqReviews in [stableRequirements@80]Cost', 
	'effectiveReqReviews in [stableRequirements@80]Chances', 
	'problemReport in [stableRequirements@80]Cost', 
	'problemReport in [stableRequirements@80]Chances', 
	'configurationManagement in [stableRequirements@80]Cost', 
	'configurationManagement in [stableRequirements@80]Chances', 
	'iv&v in [stableRequirements@80]Cost', 
	'iv&v in [stableRequirements@80]Chances', 
	'documentedRequirements in [stableRequirements@80]Cost', 
	'documentedRequirements in [stableRequirements@80]Chances', 
	'designReqReview in [stableRequirements@80]Cost', 
	'designReqReview in [stableRequirements@80]Chances', 
	'[completeRequirements@88]Cost', 
	'[completeRequirements@88]Chances', 
	'effectiveReqReviews in [completeRequirements@88]Cost', 
	'effectiveReqReviews in [completeRequirements@88]Chances', 
	'iv&v in [completeRequirements@88]Cost', 
	'iv&v in [completeRequirements@88]Chances', 
	'documentedRequirements in [completeRequirements@88]Cost', 
	'documentedRequirements in [completeRequirements@88]Chances', 
	'problemReport in [completeRequirements@88]Cost', 
	'problemReport in [completeRequirements@88]Chances', 
	'designReqReview in [completeRequirements@88]Cost', 
	'designReqReview in [completeRequirements@88]Chances', 
	'[goodRequirements@92]Cost', 
	'[goodRequirements@92]Chances', 
	'[designReqReview@95]Cost', 
	'[designReqReview@95]Chances', 
	'[documentDesign@98]Cost', 
	'[documentDesign@98]Chances', 
	'[designReviews@101]Cost', 
	'[designReviews@101]Chances', 
	'[baselineDesign@106]Cost', 
	'[baselineDesign@106]Chances', 
	'[cmForDesign@109]Cost', 
	'[cmForDesign@109]Chances', 
	'[designChangeControl@112]Cost', 
	'[designChangeControl@112]Chances', 
	'[meetSpecs@115]Cost', 
	'[meetSpecs@115]Chances', 
	'documentDesign in [meetSpecs@115]Cost', 
	'documentDesign in [meetSpecs@115]Chances', 
	'designReviews in [meetSpecs@115]Cost', 
	'designReviews in [meetSpecs@115]Chances', 
	'[achievableDesign@118]Cost', 
	'[achievableDesign@118]Chances', 
	'documentDesign in [achievableDesign@118]Cost', 
	'documentDesign in [achievableDesign@118]Chances', 
	'designReviews in [achievableDesign@118]Cost', 
	'designReviews in [achievableDesign@118]Chances', 
	'baselineDesign in [achievableDesign@118]Cost', 
	'baselineDesign in [achievableDesign@118]Chances', 
	'cmForDesign in [achievableDesign@118]Cost', 
	'cmForDesign in [achievableDesign@118]Chances', 
	'designChangeControl in [achievableDesign@118]Cost', 
	'designChangeControl in [achievableDesign@118]Chances', 
	'[goodDesign@122]Cost', 
	'[goodDesign@122]Chances', 
	'[codeReviews@125]Cost', 
	'[codeReviews@125]Chances', 
	'[feasibleDesignToCode@127]Cost', 
	'[feasibleDesignToCode@127]Chances', 
	'documentDesign in [feasibleDesignToCode@127]Cost', 
	'documentDesign in [feasibleDesignToCode@127]Chances', 
	'designReqReview in [feasibleDesignToCode@127]Cost', 
	'designReqReview in [feasibleDesignToCode@127]Chances', 
	'designReviews in [feasibleDesignToCode@127]Cost', 
	'designReviews in [feasibleDesignToCode@127]Chances', 
	'codeReviews in [feasibleDesignToCode@127]Cost', 
	'codeReviews in [feasibleDesignToCode@127]Chances', 
	'[testPlans@131]Cost', 
	'[testPlans@131]Chances', 
	'[unitTest@134]Cost', 
	'[unitTest@134]Chances', 
	'[goodTesting@136]Cost', 
	'[goodTesting@136]Chances', 
	'codeReviews in [goodTesting@136]Cost', 
	'codeReviews in [goodTesting@136]Chances', 
	'testPlans in [goodTesting@136]Cost', 
	'testPlans in [goodTesting@136]Chances', 
	'unitTest in [goodTesting@136]Cost', 
	'unitTest in [goodTesting@136]Chances', 
	'[goodCoding@138]Cost', 
	'[goodCoding@138]Chances', 
	'effectiveReqReviews in [goodCoding@138]Cost', 
	'effectiveReqReviews in [goodCoding@138]Chances', 
	'documentDesign in [goodCoding@138]Cost', 
	'documentDesign in [goodCoding@138]Chances', 
	'designReqReview in [goodCoding@138]Cost', 
	'designReqReview in [goodCoding@138]Chances', 
	'designReviews in [goodCoding@138]Cost', 
	'designReviews in [goodCoding@138]Chances', 
	'codeReviews in [goodCoding@138]Cost', 
	'codeReviews in [goodCoding@138]Chances', 
	'testPlans in [goodCoding@138]Cost', 
	'testPlans in [goodCoding@138]Chances', 
	'unitTest in [goodCoding@138]Cost', 
	'unitTest in [goodCoding@138]Chances', 
	'[goodImplemenation@142]Cost', 
	'[goodImplemenation@142]Chances', 
	'[systemIntegration@145]Cost', 
	'[systemIntegration@145]Chances', 
	'[goodIntegration@147]Cost', 
	'[goodIntegration@147]Chances', 
	'systemIntegration in [goodIntegration@147]Cost', 
	'systemIntegration in [goodIntegration@147]Chances', 
	'codeReviews in [goodIntegration@147]Cost', 
	'codeReviews in [goodIntegration@147]Chances', 
	'goodTesting in [goodIntegration@147]Cost', 
	'goodTesting in [goodIntegration@147]Chances', 
	'[goodProject@150]Cost', 
	'[goodProject@150]Chances' ,
	orsCostCombine,
	class].

	
%(d)/data =   [v,in,noAlpha,noMean,depth,andpAlpha,andpMean
%	     ,orpAlpha,andfMean,orpMean,time,isTree,av,n,class
%	     ]
d granularity(5).
d significant1(12).
d significant2(2).
d nChanges(X) --> {member(X,[3])}.
d format('~15> : ~4>~w ~4-\n').

%d now(    [noMean < 12]).
%d changes([                  andpMean <12,in<61,orpMean > 5]).
%(r)/rule =   [class,repeats, andpMean    ,in    ,orpMean].
%:- index(rule(1,    1,       0           ,0 
%:- dynamic (rule)/5.

d now(    []).

d changes(['[achievableDesign@118]Cost'  >=0,
'[authorization@57]Cost'  >=0,
'[baselineDesign@106]Cost'  >=0,
'[cmForDesign@109]Cost'  >=0,
'[codeReviews@125]Cost'  >=0,
'[configurationManagement@73]Cost'  >=0,
'[designChangeControl@112]Cost' >=0,
'[designReqReview@95]Cost' >=0,
'[designReviews@101]Cost' >=0,
'[documentDesign@98]Cost' >=0,
'[effectiveReqReviews@62]Cost' >=0,
'[feasibleDesignToCode@127]Cost' >=0,
'[goodCoding@138]Cost' >=0,
'[goodDesign@122]Cost' >=0,
'[goodImplemenation@142]Cost' >=0,
'[goodIntegration@147]Cost' >=0,
'[goodProject@150]Cost' >=0,
'[goodTesting@136]Cost' >=0,
'[iv&v@76]Cost' >=0,
'[meetSpecs@115]Cost' >=0,
'[problemReport@70]Cost' >=0,
'[systemIntegration@145]Cost' >=0,
'[testPlans@131]Cost' >=0,
'[unitTest@134]Cost' >=0]).
	
(r)/rule =   [class,repeats,
	'[achievableDesign@118]Cost',
'[authorization@57]Cost',
'[baselineDesign@106]Cost',
'[cmForDesign@109]Cost',
'[codeReviews@125]Cost',
'[configurationManagement@73]Cost',
'[designChangeControl@112]Cost',
'[designReqReview@95]Cost',
'[designReviews@101]Cost',
'[documentDesign@98]Cost',
'[effectiveReqReviews@62]Cost',
'[feasibleDesignToCode@127]Cost',
'[goodCoding@138]Cost',
'[goodDesign@122]Cost',
'[goodImplemenation@142]Cost',
'[goodIntegration@147]Cost',
'[goodProject@150]Cost',
'[goodTesting@136]Cost',
'[iv&v@76]Cost',
'[meetSpecs@115]Cost',
'[problemReport@70]Cost',
'[systemIntegration@145]Cost',
'[testPlans@131]Cost',
'[unitTest@134]Cost'
].

:- index(rule(1,    1, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)).
:- dynamic (rule)/26.

r ordering([% Bad
            hilo % hi costs, log lo  chances
	   ,lolo % lo costs, log low  chances
           ,hihi % hi costs, log high chances
           ,lohi % lo costs, log high chances
	   ]% Good
           ).
r score(Class,Score) -->
	r ordering(Order),
	{nth0(N,Order,Class),
	 Score is 2^N}.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

d getRelevant([],[]).
d getRelevant([What|Whats],[What=V|Rest]) -->
	d What=V0,
	{v2Band(What,V0,V)},
	d getRelevant(Whats,Rest).

d now -->
	d now(N),
	d N.

d changes -->
	d changes(C),
	d C.

d isRelevant(L) -->
	d changes(L0),
	{maplist(arg(1),L0,L)}.

d isNow(L) -->
	d now(L0),
	{maplist(arg(1),L0,L)}.

d relevant(Rel) -->
	d isRelevant(R),
	d getRelevant(R,Fields),
	d class=Class,
	{r([class=Class,repeats=1|Fields],_,Rel)}.



	
d select('no change') --> !,d match.
d select(What =  Band) --> d match, d What=Value,{v2Band(What,Value,Band)}.
d select(What >  Band) --> d match, d What=Value,{v2Band(What,Value,Band0), Band0 >  Band}.
d select(What >= Band) --> d match, d What=Value,{v2Band(What,Value,Band0), Band0 >= Band}.
d select(What <  Band) --> d match, d What=Value,{v2Band(What,Value,Band0), Band0 <  Band}.
d select(What =< Band) --> d match, d What=Value,{v2Band(What,Value,Band0), Band0 =< Band}.

d selects([]).
d selects([H|T]) --> d select(H), d selects(T).

d referencedFields(F) -->
	d isRelevant(L1),
	d isNow(L2),
	{append(L1,L2,F0),
         unique(F0,F)}.

d want --> 
	(d now; d changes),!.

d zap.
d field(F) -->
	d F=_.

d range(F,Range) -->
	d field(F),
	{F \= class,
	bagof(V,F^(d([fetch,want,F=V]),nonvar(V)),All),
        msort(All,Range)}.

d(show,X,X) :-
	nl,
	forall(d(F=V,X,X),format('~10> = ~w\n',[F,V])).

v2Band(R,V,N) :-
	bands(R,Bands),
	nth1(Pos,Bands,group(N,Bottom,Top)),
	(V in Bottom .. Top
	;length(Bands,Pos),
	 V >= Bottom, V =< Top),!.

theBand(R=N,R in Bottom .. Top) :- 
	bands(R,Bands),
	member(group(N,Bottom,Top),Bands),!.
theBand(X,X).

sum([H],H) :- !.
sum([H|T],Out) :- sum(T,H,Out).

sum([],X,X).
sum([H|T],In,Out) :- Temp is In + H, sum(T,Temp,Out).

r zap --> r blank(B), {retractall(B)}.

r class(Y) --> r ordering(X), {member(Y,X)}.
r better(X,Y) --> r ordering(O),{nth0(N1,O,X),nth0(N2,O,Y), N1 > N2}. 
r improvement(X,Y,N) -->
	r score(X,N1),
	r score(Y,N2),
	{N is N2 - N1}.

r worse(X,Y)  --> r better(Y,X).
r best(X)     --> r ordering(O), {last(X,O)}.
r(counts(C),X,X) :- bagof(R,X^Z^r([match,repeats=R],X,Z),All),sum(All,C).
r(counts(Class,C),X,X) :- 
	bagof(R,X^Z^Class^
                     r([class=Class,match,repeats=R],X,Z),
		   All),
	sum(All,C).

r changeBand(F,Band) -->
	d changes(Changes),
	{member(Change,Changes),
	Change =.. [Op,F,Value],
	bands(F,Bands),
	member(group(Band,Min,Max),Bands),
	inBand(Op,Value,Min,Max)}.


r fcount(Class,F,V,N) -->
	r class is Class,     % make this class "Class"
	r counts(All),        % count the number of rows in this class in rules (rules is now union changes)
	r changeBand(F,V),    % find me bands in the changed zone
%	{d(granularity(Top0)),
%	 Top is Top0 + 1,
%	 between(1,Top,V)},
%	r F=V,
%        r inChange(F,V),
	{\+ member(F,[repeats,class])}, % forget the dull ones
	r F=V,                % restrict the rule to just this value
	r counts(N0),         % count the rules with this restriction
	{N is N0 / All}.      % normalize the count

r fcounts(All) -->
	r best(B),
	{bagof(F/V=N,B^X^Y^r(fcount(B,F,V,N),X,Y),All)}.

r search(C,T,N-(F=V)) -->
	r fcounts(All), % change1
	r best(Best),
	r worse(Class,Best),
	r improvement(Class,Best,Delta),
        {
	member(F/V=N0,All)},
	r fcount(Class,F,V,N1),
        {N is Delta*N0/N1,
	 N > T,
	 print(user,C),flush_output(user)}.

r searches(C,T,All) -->
	{setof(One, T^C^(r search(C,T,One)),All0),
	reverse(All0,All1),
	maplist(intit,All1,All3),
	bins(All3,Bins),
	nl,
	forall(member(Bin-Size,Bins),
	       format('~4> : ~4> ~4-\n',[Bin,Size,Size])),
	nl,
	maplist(arg(2),All1,All2),
	removeDupsKeepOrder(All2,All)}.

r searches(All) -->
	r searches(-,1,Temp),
	{d(significant1(T))},

	{T=1 -> All = Temp ; r searches(+,T,All)}.

intit(X-_,Y) :- Y is round(X).

prule(N) :- 
	functor(X,r,N), 
	clause(X,Y), 
	(Y=true -> Z=X; Z=(X :- Y)),
	portray_clause(Z),
	fail.
prule(_).

inBand(=<,V,Min,_Max) :- Min =< V. 
inBand(<, V,Min,_Max) :- Min < V.
inBand(=, V,Min, Max) :- numeric(Min),!, V in Min .. Max.
inBand(=, V,Min, Max) :- V = Min; V=Max.
inBand(>, V,_Min,Max) :- Max > V.
inBand(>=,V,_Min,Max) :- Max > V.

