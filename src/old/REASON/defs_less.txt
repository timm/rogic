    /*

AAcccceessssoorr

    Been at this one for years.

HHeeaaddeerr

  OOppeerraattoorrss  **//

     :- op(800, xfy, with).
     :- op(700, xfx,  :=).
     :- op(1,   fx,  in).
     :- op(1,   fx,  the).
     :- op(1,   fx,  our). /*

  FFllaaggss  **//

     :- dynamic       def/2.
     :- discontiguous def/2.
     :- multifile     def/2.  /*

  HHaacckkss  **//

     goal_expansion( -(F,X,Y),  Z) :- clause(at(-F,    X,Y),Z).
     goal_expansion( +(F,X,Y),  Z) :- clause(at(+F,    X,Y),Z).
     goal_expansion( +(F,V,X,Y),Z) :- clause(at(F+V,   X,Y),Z).
     goal_expansion( =(F,V,X,Y),Z) :- clause(at(F =  V,X,Y),Z).
     goal_expansion(is(F,V,X,Y),Z) :- clause(at(F is V,X,Y),Z).
     goal_expansion(>=(F,V,X,Y),Z) :- clause(at(F >= V,X,Y),Z).
     goal_expansion( >(F,V,X,Y),Z) :- clause(at(F >  V,X,Y),Z).
     goal_expansion( <(F,V,X,Y),Z) :- clause(at(F <  V,X,Y),Z).
     goal_expansion(=<(F,V,X,Y),Z) :- clause(at(F =< V,X,Y),Z).
     goal_expansion(\=(F,V,X,Y),Z) :- clause(at(F \= V,X,Y),Z).
     goal_expansion(:=(F,V,X,Y),Z) :- clause(at(F:=V,  X,Y),Z).  /*

BBooddyy

  IInntteerrpprreetteerr  **//

     at(X)   :- at(X,_,_).
     at(X,Y) :- at(X,_,Y).

     at(F/V0/V)   --> at(F,V0,V). 
     at(F := V)   --> at(F/_/V).
     at(F=V)      --> at(F/V/V). 
     at(F is N)   --> at(F/_/V),   {V is N}.
     at(F+N)      --> at(F/V0/V),  {V is V0+N}.
     at(+F)       --> at(F/V0/V),  {V is V0+1}.
     at(-F)       --> at(F/V0/V),  {V is V0-1}.
     at(F >= V)   --> at(F/V1/V1), {V >= V1}.
     at(F >  V)   --> at(F/V1/V1), {V >  V1}.
     at(F <  V)   --> at(F/V1/V1), {V <  V1}.
     at(F =< V)   --> at(F/V1/V1), {V =< V1}.
     at(F \= V)   --> at(F/V1/V1), {V \= V1}.
     at(X with Y) --> at(X),at(Y).
     at(in X) --> in(X). 
     at(our fields,_,Fields,This=In,This=In) :- def(This,Fields).
     at(the Field,Old,New,This=In,This=Out) :-
        def(This,Fields),
        at1(Fields,Field,Old,New,In,Out).

     at1([Field|_],Field,Old,New,[Old|Rest],[New|Rest]).
     at1([_|Fields],Field,Old,New,[H|T0],[H|T1]) :-
        at1(Fields,Field,Old,New,T0,T1). 

     in(This,This=L,This=L) :- 
        def(This,Fs), length(Fs,N), length(L,N). /*

  OOppttiimmiizzeerr  **//

     goal_expansion(at(our F,Old,New,Def=In,Def=Out),true) :- 
            ground((Def,F)), 
            known(our Def,F),
            at(our F,Old,New,Def=In,Def=Out).
     goal_expansion(at(the F,Old,New,Def=In,Def=Out),true) :- 
            ground((Def,F)), 
            known(the Def,F),
            at(the F,Old,New,Def=In,Def=Out).
     goal_expansion(in(Def,In,Out),true) :- 
            ground(Def), 
            known(Def),
            in(Def,In,Out). 
     goal_expansion(at(X),Y) :- 
            clause(X,Y).
     goal_expansion(at(X,Y),Z) :- 
            clause(at(X,Y),Z). 
     goal_expansion(at(F/V0/V,Def=In,Def=Out),true) :- 
            ground((Def,F)), 
            known(Def,F),
            at(F,V0,V,Def=In,Def=Out).
     goal_expansion(at(X with Y,In,Out),true):- 
            nonvar(X), 
            nonvar(Y),
            at(X with Y,In,Out).
     goal_expansion(at(A,B,C),true) :- 
            solo(at(A,B,C)),
            at(A,B,C).

     solo(X) :- Y='#solo', flag(Y,_,0), \+ solo1(Y,X), flag(Y,1,1).
     solo1(Sym,X) :- clause(X,_),flag(Sym,N,N+1),N > 1,!.  /*

  OOppttiimmiizzeerr  EErrrroorr  HHaannddlleerr  **//

     known(Def) :- 
            def(Def,_) -> true; unknown(['unknown [~w]',Def]).

     known(Def,our fields) :-
             known(Def) -> true; unknown(['[~w] unknown in [~w]\n',Def]).

     known(Def,the F) :- 
            known(Def),
            (def(Def,Fs), member(F,Fs)
            -> true
            ;  unknown(['[~w] unknown in [~w]',F,Def])).

     unknown([Head|Tail]) :-
            source_location(Path,Line),
            file_base_name(Path,File),
            format('%W> at line ~w of ~w: ',[Line,File]),
            format(Head,Tail),nl,
            fail. /*

FFooootteerr

    This stuff must come after the above definitions of "at/3" and "at/5".*/

