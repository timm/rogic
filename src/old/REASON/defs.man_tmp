.\" Automatically generated by Pod::Man v1.34, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MYPOD_TMP 1"
.TH MYPOD_TMP 1 "2003-08-24" "perl v5.8.0" "defs"
/*
.SH "Accessor"
.IX Header "Accessor"
Been at this one for years.
.SH "Header"
.IX Header "Header"
.Sh "Operators */"
.IX Subsection "Operators */"
.Vb 5
\& :- op(800, xfy, with).
\& :- op(700, xfx,  :=).
\& :- op(1,   fx,  in).
\& :- op(1,   fx,  the).
\& :- op(1,   fx,  our). /*
.Ve
.Sh "Flags */"
.IX Subsection "Flags */"
.Vb 3
\& :- dynamic       def/2.
\& :- discontiguous def/2.
\& :- multifile     def/2.  /*
.Ve
.Sh "Hacks */"
.IX Subsection "Hacks */"
.Vb 11
\& goal_expansion( -(F,X,Y),  Z) :- clause(at(-F,    X,Y),Z).
\& goal_expansion( +(F,X,Y),  Z) :- clause(at(+F,    X,Y),Z).
\& goal_expansion( +(F,V,X,Y),Z) :- clause(at(F+V,   X,Y),Z).
\& goal_expansion( =(F,V,X,Y),Z) :- clause(at(F =  V,X,Y),Z).
\& goal_expansion(is(F,V,X,Y),Z) :- clause(at(F is V,X,Y),Z).
\& goal_expansion(>=(F,V,X,Y),Z) :- clause(at(F >= V,X,Y),Z).
\& goal_expansion( >(F,V,X,Y),Z) :- clause(at(F >  V,X,Y),Z).
\& goal_expansion( <(F,V,X,Y),Z) :- clause(at(F <  V,X,Y),Z).
\& goal_expansion(=<(F,V,X,Y),Z) :- clause(at(F =< V,X,Y),Z).
\& goal_expansion(\e=(F,V,X,Y),Z) :- clause(at(F \e= V,X,Y),Z).
\& goal_expansion(:=(F,V,X,Y),Z) :- clause(at(F:=V,  X,Y),Z).  /*
.Ve
.SH "Body"
.IX Header "Body"
.Sh "Interpreter */"
.IX Subsection "Interpreter */"
.Vb 2
\& at(X)   :- at(X,_,_).
\& at(X,Y) :- at(X,_,Y).
.Ve
.PP
.Vb 18
\& at(F/V0/V)   --> at(F,V0,V). 
\& at(F := V)   --> at(F/_/V).
\& at(F=V)      --> at(F/V/V). 
\& at(F is N)   --> at(F/_/V),   {V is N}.
\& at(F+N)      --> at(F/V0/V),  {V is V0+N}.
\& at(+F)       --> at(F/V0/V),  {V is V0+1}.
\& at(-F)       --> at(F/V0/V),  {V is V0-1}.
\& at(F >= V)   --> at(F/V1/V1), {V >= V1}.
\& at(F >  V)   --> at(F/V1/V1), {V >  V1}.
\& at(F <  V)   --> at(F/V1/V1), {V <  V1}.
\& at(F =< V)   --> at(F/V1/V1), {V =< V1}.
\& at(F \e= V)   --> at(F/V1/V1), {V \e= V1}.
\& at(X with Y) --> at(X),at(Y).
\& at(in X) --> in(X). 
\& at(our fields,_,Fields,This=In,This=In) :- def(This,Fields).
\& at(the Field,Old,New,This=In,This=Out) :-
\&    def(This,Fields),
\&    at1(Fields,Field,Old,New,In,Out).
.Ve
.PP
.Vb 3
\& at1([Field|_],Field,Old,New,[Old|Rest],[New|Rest]).
\& at1([_|Fields],Field,Old,New,[H|T0],[H|T1]) :-
\&    at1(Fields,Field,Old,New,T0,T1).
.Ve
.PP
.Vb 2
\& in(This,This=L,This=L) :- 
\&    def(This,Fs), length(Fs,N), length(L,N). /*
.Ve
.Sh "Optimizer */"
.IX Subsection "Optimizer */"
.Vb 27
\& goal_expansion(at(our F,Old,New,Def=In,Def=Out),true) :- 
\&        ground((Def,F)), 
\&        known(our Def,F),
\&        at(our F,Old,New,Def=In,Def=Out).
\& goal_expansion(at(the F,Old,New,Def=In,Def=Out),true) :- 
\&        ground((Def,F)), 
\&        known(the Def,F),
\&        at(the F,Old,New,Def=In,Def=Out).
\& goal_expansion(in(Def,In,Out),true) :- 
\&        ground(Def), 
\&        known(Def),
\&        in(Def,In,Out). 
\& goal_expansion(at(X),Y) :- 
\&        clause(X,Y).
\& goal_expansion(at(X,Y),Z) :- 
\&        clause(at(X,Y),Z). 
\& goal_expansion(at(F/V0/V,Def=In,Def=Out),true) :- 
\&        ground((Def,F)), 
\&        known(Def,F),
\&        at(F,V0,V,Def=In,Def=Out).
\& goal_expansion(at(X with Y,In,Out),true):- 
\&        nonvar(X), 
\&        nonvar(Y),
\&        at(X with Y,In,Out).
\& goal_expansion(at(A,B,C),true) :- 
\&        solo(at(A,B,C)),
\&        at(A,B,C).
.Ve
.PP
.Vb 2
\& solo(X) :- Y='#solo', flag(Y,_,0), \e+ solo1(Y,X), flag(Y,1,1).
\& solo1(Sym,X) :- clause(X,_),flag(Sym,N,N+1),N > 1,!.  /*
.Ve
.Sh "Optimizer Error Handler */"
.IX Subsection "Optimizer Error Handler */"
.Vb 2
\& known(Def) :- 
\&        def(Def,_) -> true; unknown(['unknown [~w]',Def]).
.Ve
.PP
.Vb 2
\& known(Def,our fields) :-
\&         known(Def) -> true; unknown(['[~w] unknown in [~w]\en',Def]).
.Ve
.PP
.Vb 5
\& known(Def,the F) :- 
\&        known(Def),
\&        (def(Def,Fs), member(F,Fs)
\&        -> true
\&        ;  unknown(['[~w] unknown in [~w]',F,Def])).
.Ve
.PP
.Vb 6
\& unknown([Head|Tail]) :-
\&        source_location(Path,Line),
\&        file_base_name(Path,File),
\&        format('%W> at line ~w of ~w: ',[Line,File]),
\&        format(Head,Tail),nl,
\&        fail. /*
.Ve
.SH "Footer"
.IX Header "Footer"
This stuff must come after the above definitions of \f(CW\*(C`at/3\*(C'\fR and 
\&\f(CW\*(C`at/5\*(C'\fR.*/
